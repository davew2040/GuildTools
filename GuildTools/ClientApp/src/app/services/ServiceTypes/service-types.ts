/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class RegistrationDetails implements IRegistrationDetails {
    username!: string;
    email!: string;
    password!: string;
    playerName?: string | undefined;
    playerRealm?: string | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;
    playerRegion?: string | undefined;

    constructor(data?: IRegistrationDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.email = data["email"];
            this.password = data["password"];
            this.playerName = data["playerName"];
            this.playerRealm = data["playerRealm"];
            this.guildName = data["guildName"];
            this.guildRealm = data["guildRealm"];
            this.playerRegion = data["playerRegion"];
        }
    }

    static fromJS(data: any): RegistrationDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        data["playerName"] = this.playerName;
        data["playerRealm"] = this.playerRealm;
        data["guildName"] = this.guildName;
        data["guildRealm"] = this.guildRealm;
        data["playerRegion"] = this.playerRegion;
        return data; 
    }
}

export interface IRegistrationDetails {
    username: string;
    email: string;
    password: string;
    playerName?: string | undefined;
    playerRealm?: string | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;
    playerRegion?: string | undefined;
}

export class ConfirmEmail implements IConfirmEmail {
    userId!: string;
    token!: string;

    constructor(data?: IConfirmEmail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.token = data["token"];
        }
    }

    static fromJS(data: any): ConfirmEmail {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmEmail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["token"] = this.token;
        return data; 
    }
}

export interface IConfirmEmail {
    userId: string;
    token: string;
}

export class ResetPasswordWithTokenModel implements IResetPasswordWithTokenModel {
    userId?: string | undefined;
    token?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IResetPasswordWithTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.token = data["token"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordWithTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordWithTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["token"] = this.token;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IResetPasswordWithTokenModel {
    userId?: string | undefined;
    token?: string | undefined;
    newPassword?: string | undefined;
}

export class LoginCredentials implements ILoginCredentials {
    email!: string;
    password!: string;

    constructor(data?: ILoginCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LoginCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginCredentials {
    email: string;
    password: string;
}

export class LoginResponse implements ILoginResponse {
    username?: string | undefined;
    email?: string | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;
    playerName?: string | undefined;
    playerRealm?: string | undefined;
    playerRegion?: string | undefined;
    authenticationDetails?: { [key: string] : any; } | undefined;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.email = data["email"];
            this.guildName = data["guildName"];
            this.guildRealm = data["guildRealm"];
            this.playerName = data["playerName"];
            this.playerRealm = data["playerRealm"];
            this.playerRegion = data["playerRegion"];
            if (data["authenticationDetails"]) {
                this.authenticationDetails = {} as any;
                for (let key in data["authenticationDetails"]) {
                    if (data["authenticationDetails"].hasOwnProperty(key))
                        this.authenticationDetails![key] = data["authenticationDetails"][key];
                }
            }
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["guildName"] = this.guildName;
        data["guildRealm"] = this.guildRealm;
        data["playerName"] = this.playerName;
        data["playerRealm"] = this.playerRealm;
        data["playerRegion"] = this.playerRegion;
        if (this.authenticationDetails) {
            data["authenticationDetails"] = {};
            for (let key in this.authenticationDetails) {
                if (this.authenticationDetails.hasOwnProperty(key))
                    data["authenticationDetails"][key] = this.authenticationDetails[key];
            }
        }
        return data; 
    }
}

export interface ILoginResponse {
    username?: string | undefined;
    email?: string | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;
    playerName?: string | undefined;
    playerRealm?: string | undefined;
    playerRegion?: string | undefined;
    authenticationDetails?: { [key: string] : any; } | undefined;
}

export class GuildStatsResponse implements IGuildStatsResponse {
    isCompleted?: boolean | undefined;
    positionInQueue?: number | undefined;
    completionProgress?: number | undefined;
    values?: GuildMemberStats[] | undefined;

    constructor(data?: IGuildStatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isCompleted = data["isCompleted"];
            this.positionInQueue = data["positionInQueue"];
            this.completionProgress = data["completionProgress"];
            if (data["values"] && data["values"].constructor === Array) {
                this.values = [] as any;
                for (let item of data["values"])
                    this.values!.push(GuildMemberStats.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GuildStatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GuildStatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCompleted"] = this.isCompleted;
        data["positionInQueue"] = this.positionInQueue;
        data["completionProgress"] = this.completionProgress;
        if (this.values && this.values.constructor === Array) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGuildStatsResponse {
    isCompleted?: boolean | undefined;
    positionInQueue?: number | undefined;
    completionProgress?: number | undefined;
    values?: GuildMemberStats[] | undefined;
}

export class GuildMemberStats implements IGuildMemberStats {
    name?: string | undefined;
    guildName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;
    level?: number | undefined;
    equippedIlvl?: number | undefined;
    class?: number | undefined;
    maximumIlvl?: number | undefined;
    achievementPoints?: number | undefined;
    mountCount?: number | undefined;
    petCount?: number | undefined;
    pvp2v2Rating?: number | undefined;
    pvp3v3Rating?: number | undefined;
    pvpRbgRating?: number | undefined;
    totalHonorableKills?: number | undefined;
    guildRank?: number | undefined;
    azeriteLevel?: number | undefined;

    constructor(data?: IGuildMemberStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.guildName = data["guildName"];
            this.realmName = data["realmName"];
            this.regionName = data["regionName"];
            this.level = data["level"];
            this.equippedIlvl = data["equippedIlvl"];
            this.class = data["class"];
            this.maximumIlvl = data["maximumIlvl"];
            this.achievementPoints = data["achievementPoints"];
            this.mountCount = data["mountCount"];
            this.petCount = data["petCount"];
            this.pvp2v2Rating = data["pvp2v2Rating"];
            this.pvp3v3Rating = data["pvp3v3Rating"];
            this.pvpRbgRating = data["pvpRbgRating"];
            this.totalHonorableKills = data["totalHonorableKills"];
            this.guildRank = data["guildRank"];
            this.azeriteLevel = data["azeriteLevel"];
        }
    }

    static fromJS(data: any): GuildMemberStats {
        data = typeof data === 'object' ? data : {};
        let result = new GuildMemberStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["guildName"] = this.guildName;
        data["realmName"] = this.realmName;
        data["regionName"] = this.regionName;
        data["level"] = this.level;
        data["equippedIlvl"] = this.equippedIlvl;
        data["class"] = this.class;
        data["maximumIlvl"] = this.maximumIlvl;
        data["achievementPoints"] = this.achievementPoints;
        data["mountCount"] = this.mountCount;
        data["petCount"] = this.petCount;
        data["pvp2v2Rating"] = this.pvp2v2Rating;
        data["pvp3v3Rating"] = this.pvp3v3Rating;
        data["pvpRbgRating"] = this.pvpRbgRating;
        data["totalHonorableKills"] = this.totalHonorableKills;
        data["guildRank"] = this.guildRank;
        data["azeriteLevel"] = this.azeriteLevel;
        return data; 
    }
}

export interface IGuildMemberStats {
    name?: string | undefined;
    guildName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;
    level?: number | undefined;
    equippedIlvl?: number | undefined;
    class?: number | undefined;
    maximumIlvl?: number | undefined;
    achievementPoints?: number | undefined;
    mountCount?: number | undefined;
    petCount?: number | undefined;
    pvp2v2Rating?: number | undefined;
    pvp3v3Rating?: number | undefined;
    pvpRbgRating?: number | undefined;
    totalHonorableKills?: number | undefined;
    guildRank?: number | undefined;
    azeriteLevel?: number | undefined;
}

export class AggregatedProfileGuildStatsResponse implements IAggregatedProfileGuildStatsResponse {
    isCompleted?: boolean | undefined;
    individualGuildResponses?: IndividualAggregatedStatsItem[] | undefined;
    values?: GuildMemberStats[] | undefined;

    constructor(data?: IAggregatedProfileGuildStatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isCompleted = data["isCompleted"];
            if (data["individualGuildResponses"] && data["individualGuildResponses"].constructor === Array) {
                this.individualGuildResponses = [] as any;
                for (let item of data["individualGuildResponses"])
                    this.individualGuildResponses!.push(IndividualAggregatedStatsItem.fromJS(item));
            }
            if (data["values"] && data["values"].constructor === Array) {
                this.values = [] as any;
                for (let item of data["values"])
                    this.values!.push(GuildMemberStats.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AggregatedProfileGuildStatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AggregatedProfileGuildStatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCompleted"] = this.isCompleted;
        if (this.individualGuildResponses && this.individualGuildResponses.constructor === Array) {
            data["individualGuildResponses"] = [];
            for (let item of this.individualGuildResponses)
                data["individualGuildResponses"].push(item.toJSON());
        }
        if (this.values && this.values.constructor === Array) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAggregatedProfileGuildStatsResponse {
    isCompleted?: boolean | undefined;
    individualGuildResponses?: IndividualAggregatedStatsItem[] | undefined;
    values?: GuildMemberStats[] | undefined;
}

export class IndividualAggregatedStatsItem implements IIndividualAggregatedStatsItem {
    individualStats?: GuildStatsResponse | undefined;
    guildName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;

    constructor(data?: IIndividualAggregatedStatsItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.individualStats = data["individualStats"] ? GuildStatsResponse.fromJS(data["individualStats"]) : <any>undefined;
            this.guildName = data["guildName"];
            this.realmName = data["realmName"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): IndividualAggregatedStatsItem {
        data = typeof data === 'object' ? data : {};
        let result = new IndividualAggregatedStatsItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["individualStats"] = this.individualStats ? this.individualStats.toJSON() : <any>undefined;
        data["guildName"] = this.guildName;
        data["realmName"] = this.realmName;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IIndividualAggregatedStatsItem {
    individualStats?: GuildStatsResponse | undefined;
    guildName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;
}

export class RaiderIoStatsResponse implements IRaiderIoStatsResponse {
    isCompleted?: boolean | undefined;
    positionInQueue?: number | undefined;
    completionProgress?: number | undefined;
    values?: RaiderIoStats[] | undefined;

    constructor(data?: IRaiderIoStatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isCompleted = data["isCompleted"];
            this.positionInQueue = data["positionInQueue"];
            this.completionProgress = data["completionProgress"];
            if (data["values"] && data["values"].constructor === Array) {
                this.values = [] as any;
                for (let item of data["values"])
                    this.values!.push(RaiderIoStats.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RaiderIoStatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RaiderIoStatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCompleted"] = this.isCompleted;
        data["positionInQueue"] = this.positionInQueue;
        data["completionProgress"] = this.completionProgress;
        if (this.values && this.values.constructor === Array) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRaiderIoStatsResponse {
    isCompleted?: boolean | undefined;
    positionInQueue?: number | undefined;
    completionProgress?: number | undefined;
    values?: RaiderIoStats[] | undefined;
}

export class RaiderIoStats implements IRaiderIoStats {
    name?: string | undefined;
    realm?: string | undefined;
    class?: number | undefined;
    raiderIoOverall?: number | undefined;
    raiderIoDps?: number | undefined;
    raiderIoTank?: number | undefined;
    raiderIoHealer?: number | undefined;

    constructor(data?: IRaiderIoStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.realm = data["realm"];
            this.class = data["class"];
            this.raiderIoOverall = data["raiderIoOverall"];
            this.raiderIoDps = data["raiderIoDps"];
            this.raiderIoTank = data["raiderIoTank"];
            this.raiderIoHealer = data["raiderIoHealer"];
        }
    }

    static fromJS(data: any): RaiderIoStats {
        data = typeof data === 'object' ? data : {};
        let result = new RaiderIoStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["realm"] = this.realm;
        data["class"] = this.class;
        data["raiderIoOverall"] = this.raiderIoOverall;
        data["raiderIoDps"] = this.raiderIoDps;
        data["raiderIoTank"] = this.raiderIoTank;
        data["raiderIoHealer"] = this.raiderIoHealer;
        return data; 
    }
}

export interface IRaiderIoStats {
    name?: string | undefined;
    realm?: string | undefined;
    class?: number | undefined;
    raiderIoOverall?: number | undefined;
    raiderIoDps?: number | undefined;
    raiderIoTank?: number | undefined;
    raiderIoHealer?: number | undefined;
}

export class RequestStatsCompleteNotification implements IRequestStatsCompleteNotification {
    email?: string | undefined;
    region?: string | undefined;
    guild?: string | undefined;
    realm?: string | undefined;
    requestType?: number | undefined;

    constructor(data?: IRequestStatsCompleteNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.region = data["region"];
            this.guild = data["guild"];
            this.realm = data["realm"];
            this.requestType = data["requestType"];
        }
    }

    static fromJS(data: any): RequestStatsCompleteNotification {
        data = typeof data === 'object' ? data : {};
        let result = new RequestStatsCompleteNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["region"] = this.region;
        data["guild"] = this.guild;
        data["realm"] = this.realm;
        data["requestType"] = this.requestType;
        return data; 
    }
}

export interface IRequestStatsCompleteNotification {
    email?: string | undefined;
    region?: string | undefined;
    guild?: string | undefined;
    realm?: string | undefined;
    requestType?: number | undefined;
}

export class GuildFound implements IGuildFound {
    found?: boolean | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;

    constructor(data?: IGuildFound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.found = data["found"];
            this.realmName = data["realmName"];
            this.guildName = data["guildName"];
        }
    }

    static fromJS(data: any): GuildFound {
        data = typeof data === 'object' ? data : {};
        let result = new GuildFound();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["found"] = this.found;
        data["realmName"] = this.realmName;
        data["guildName"] = this.guildName;
        return data; 
    }
}

export interface IGuildFound {
    found?: boolean | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;
}

export class PlayerFound implements IPlayerFound {
    found?: boolean | undefined;
    playerDetails?: BlizzardPlayer | undefined;

    constructor(data?: IPlayerFound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.found = data["found"];
            this.playerDetails = data["playerDetails"] ? BlizzardPlayer.fromJS(data["playerDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PlayerFound {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerFound();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["found"] = this.found;
        data["playerDetails"] = this.playerDetails ? this.playerDetails.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPlayerFound {
    found?: boolean | undefined;
    playerDetails?: BlizzardPlayer | undefined;
}

export class BlizzardPlayer implements IBlizzardPlayer {
    playerName?: string | undefined;
    playerRealmName?: string | undefined;
    class?: number | undefined;
    level?: number | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;

    constructor(data?: IBlizzardPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.playerName = data["playerName"];
            this.playerRealmName = data["playerRealmName"];
            this.class = data["class"];
            this.level = data["level"];
            this.guildName = data["guildName"];
            this.guildRealm = data["guildRealm"];
        }
    }

    static fromJS(data: any): BlizzardPlayer {
        data = typeof data === 'object' ? data : {};
        let result = new BlizzardPlayer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerName"] = this.playerName;
        data["playerRealmName"] = this.playerRealmName;
        data["class"] = this.class;
        data["level"] = this.level;
        data["guildName"] = this.guildName;
        data["guildRealm"] = this.guildRealm;
        return data; 
    }
}

export interface IBlizzardPlayer {
    playerName?: string | undefined;
    playerRealmName?: string | undefined;
    class?: number | undefined;
    level?: number | undefined;
    guildName?: string | undefined;
    guildRealm?: string | undefined;
}

export class CreateNewGuildProfile implements ICreateNewGuildProfile {
    profileName?: string | undefined;
    guildName?: string | undefined;
    guildRealmName?: string | undefined;
    regionName?: string | undefined;
    isPublic?: boolean | undefined;

    constructor(data?: ICreateNewGuildProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileName = data["profileName"];
            this.guildName = data["guildName"];
            this.guildRealmName = data["guildRealmName"];
            this.regionName = data["regionName"];
            this.isPublic = data["isPublic"];
        }
    }

    static fromJS(data: any): CreateNewGuildProfile {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNewGuildProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileName"] = this.profileName;
        data["guildName"] = this.guildName;
        data["guildRealmName"] = this.guildRealmName;
        data["regionName"] = this.regionName;
        data["isPublic"] = this.isPublic;
        return data; 
    }
}

export interface ICreateNewGuildProfile {
    profileName?: string | undefined;
    guildName?: string | undefined;
    guildRealmName?: string | undefined;
    regionName?: string | undefined;
    isPublic?: boolean | undefined;
}

export class AddMainToProfile implements IAddMainToProfile {
    profileId?: number | undefined;
    playerId?: number | undefined;

    constructor(data?: IAddMainToProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            this.playerId = data["playerId"];
        }
    }

    static fromJS(data: any): AddMainToProfile {
        data = typeof data === 'object' ? data : {};
        let result = new AddMainToProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        data["playerId"] = this.playerId;
        return data; 
    }
}

export interface IAddMainToProfile {
    profileId?: number | undefined;
    playerId?: number | undefined;
}

export class PlayerMain implements IPlayerMain {
    id?: number | undefined;
    notes?: string | undefined;
    officerNotes?: string | undefined;
    player?: StoredPlayer | undefined;
    alts?: PlayerAlt[] | undefined;

    constructor(data?: IPlayerMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.notes = data["notes"];
            this.officerNotes = data["officerNotes"];
            this.player = data["player"] ? StoredPlayer.fromJS(data["player"]) : <any>undefined;
            if (data["alts"] && data["alts"].constructor === Array) {
                this.alts = [] as any;
                for (let item of data["alts"])
                    this.alts!.push(PlayerAlt.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlayerMain {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerMain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["notes"] = this.notes;
        data["officerNotes"] = this.officerNotes;
        data["player"] = this.player ? this.player.toJSON() : <any>undefined;
        if (this.alts && this.alts.constructor === Array) {
            data["alts"] = [];
            for (let item of this.alts)
                data["alts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPlayerMain {
    id?: number | undefined;
    notes?: string | undefined;
    officerNotes?: string | undefined;
    player?: StoredPlayer | undefined;
    alts?: PlayerAlt[] | undefined;
}

export class StoredPlayer implements IStoredPlayer {
    id?: number | undefined;
    name?: string | undefined;
    level?: number | undefined;
    class?: number | undefined;
    guildId?: number | undefined;
    realmId?: number | undefined;
    regionName?: string | undefined;
    realm?: StoredRealm | undefined;
    guild?: StoredGuild | undefined;

    constructor(data?: IStoredPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.level = data["level"];
            this.class = data["class"];
            this.guildId = data["guildId"];
            this.realmId = data["realmId"];
            this.regionName = data["regionName"];
            this.realm = data["realm"] ? StoredRealm.fromJS(data["realm"]) : <any>undefined;
            this.guild = data["guild"] ? StoredGuild.fromJS(data["guild"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StoredPlayer {
        data = typeof data === 'object' ? data : {};
        let result = new StoredPlayer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["level"] = this.level;
        data["class"] = this.class;
        data["guildId"] = this.guildId;
        data["realmId"] = this.realmId;
        data["regionName"] = this.regionName;
        data["realm"] = this.realm ? this.realm.toJSON() : <any>undefined;
        data["guild"] = this.guild ? this.guild.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStoredPlayer {
    id?: number | undefined;
    name?: string | undefined;
    level?: number | undefined;
    class?: number | undefined;
    guildId?: number | undefined;
    realmId?: number | undefined;
    regionName?: string | undefined;
    realm?: StoredRealm | undefined;
    guild?: StoredGuild | undefined;
}

export class PlayerAlt implements IPlayerAlt {
    id?: number | undefined;
    player?: StoredPlayer | undefined;

    constructor(data?: IPlayerAlt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.player = data["player"] ? StoredPlayer.fromJS(data["player"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PlayerAlt {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerAlt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["player"] = this.player ? this.player.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPlayerAlt {
    id?: number | undefined;
    player?: StoredPlayer | undefined;
}

export class StoredRealm implements IStoredRealm {
    id?: number | undefined;
    name?: string | undefined;
    slug?: string | undefined;
    regionId?: number | undefined;
    region?: GameRegion | undefined;

    constructor(data?: IStoredRealm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.slug = data["slug"];
            this.regionId = data["regionId"];
            this.region = data["region"] ? GameRegion.fromJS(data["region"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StoredRealm {
        data = typeof data === 'object' ? data : {};
        let result = new StoredRealm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["regionId"] = this.regionId;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStoredRealm {
    id?: number | undefined;
    name?: string | undefined;
    slug?: string | undefined;
    regionId?: number | undefined;
    region?: GameRegion | undefined;
}

export class StoredGuild implements IStoredGuild {
    id?: number | undefined;
    name?: string | undefined;
    realmId?: number | undefined;
    abbreviation?: string | undefined;
    realm?: StoredRealm | undefined;
    players?: BlizzardPlayer[] | undefined;

    constructor(data?: IStoredGuild) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.realmId = data["realmId"];
            this.abbreviation = data["abbreviation"];
            this.realm = data["realm"] ? StoredRealm.fromJS(data["realm"]) : <any>undefined;
            if (data["players"] && data["players"].constructor === Array) {
                this.players = [] as any;
                for (let item of data["players"])
                    this.players!.push(BlizzardPlayer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoredGuild {
        data = typeof data === 'object' ? data : {};
        let result = new StoredGuild();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["realmId"] = this.realmId;
        data["abbreviation"] = this.abbreviation;
        data["realm"] = this.realm ? this.realm.toJSON() : <any>undefined;
        if (this.players && this.players.constructor === Array) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoredGuild {
    id?: number | undefined;
    name?: string | undefined;
    realmId?: number | undefined;
    abbreviation?: string | undefined;
    realm?: StoredRealm | undefined;
    players?: BlizzardPlayer[] | undefined;
}

export class GameRegion implements IGameRegion {
    id?: number | undefined;
    regionName?: string | undefined;

    constructor(data?: IGameRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): GameRegion {
        data = typeof data === 'object' ? data : {};
        let result = new GameRegion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IGameRegion {
    id?: number | undefined;
    regionName?: string | undefined;
}

export class AddAltToMain implements IAddAltToMain {
    profileId?: number | undefined;
    mainId?: number | undefined;
    playerId?: number | undefined;

    constructor(data?: IAddAltToMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            this.mainId = data["mainId"];
            this.playerId = data["playerId"];
        }
    }

    static fromJS(data: any): AddAltToMain {
        data = typeof data === 'object' ? data : {};
        let result = new AddAltToMain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        data["mainId"] = this.mainId;
        data["playerId"] = this.playerId;
        return data; 
    }
}

export interface IAddAltToMain {
    profileId?: number | undefined;
    mainId?: number | undefined;
    playerId?: number | undefined;
}

export class RemoveAltFromMain implements IRemoveAltFromMain {
    altId?: number | undefined;
    mainId?: number | undefined;
    profileId?: number | undefined;

    constructor(data?: IRemoveAltFromMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.altId = data["altId"];
            this.mainId = data["mainId"];
            this.profileId = data["profileId"];
        }
    }

    static fromJS(data: any): RemoveAltFromMain {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveAltFromMain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["altId"] = this.altId;
        data["mainId"] = this.mainId;
        data["profileId"] = this.profileId;
        return data; 
    }
}

export interface IRemoveAltFromMain {
    altId?: number | undefined;
    mainId?: number | undefined;
    profileId?: number | undefined;
}

export class PromoteAltToMain implements IPromoteAltToMain {
    altId?: number | undefined;
    profileId?: number | undefined;

    constructor(data?: IPromoteAltToMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.altId = data["altId"];
            this.profileId = data["profileId"];
        }
    }

    static fromJS(data: any): PromoteAltToMain {
        data = typeof data === 'object' ? data : {};
        let result = new PromoteAltToMain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["altId"] = this.altId;
        data["profileId"] = this.profileId;
        return data; 
    }
}

export interface IPromoteAltToMain {
    altId?: number | undefined;
    profileId?: number | undefined;
}

export class RemoveMain implements IRemoveMain {
    mainId?: number | undefined;
    profileId?: number | undefined;

    constructor(data?: IRemoveMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mainId = data["mainId"];
            this.profileId = data["profileId"];
        }
    }

    static fromJS(data: any): RemoveMain {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveMain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mainId"] = this.mainId;
        data["profileId"] = this.profileId;
        return data; 
    }
}

export interface IRemoveMain {
    mainId?: number | undefined;
    profileId?: number | undefined;
}

export class GuildProfileSlim implements IGuildProfileSlim {
    id?: number | undefined;
    creator?: UserStub | undefined;
    profileName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;
    primaryGuildName?: string | undefined;
    isPublic?: boolean | undefined;

    constructor(data?: IGuildProfileSlim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.creator = data["creator"] ? UserStub.fromJS(data["creator"]) : <any>undefined;
            this.profileName = data["profileName"];
            this.realmName = data["realmName"];
            this.regionName = data["regionName"];
            this.primaryGuildName = data["primaryGuildName"];
            this.isPublic = data["isPublic"];
        }
    }

    static fromJS(data: any): GuildProfileSlim {
        data = typeof data === 'object' ? data : {};
        let result = new GuildProfileSlim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["profileName"] = this.profileName;
        data["realmName"] = this.realmName;
        data["regionName"] = this.regionName;
        data["primaryGuildName"] = this.primaryGuildName;
        data["isPublic"] = this.isPublic;
        return data; 
    }
}

export interface IGuildProfileSlim {
    id?: number | undefined;
    creator?: UserStub | undefined;
    profileName?: string | undefined;
    realmName?: string | undefined;
    regionName?: string | undefined;
    primaryGuildName?: string | undefined;
    isPublic?: boolean | undefined;
}

export class UserStub implements IUserStub {
    id?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;

    constructor(data?: IUserStub) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.username = data["username"];
        }
    }

    static fromJS(data: any): UserStub {
        data = typeof data === 'object' ? data : {};
        let result = new UserStub();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["username"] = this.username;
        return data; 
    }
}

export interface IUserStub {
    id?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
}

export class FullGuildProfile implements IFullGuildProfile {
    id?: number | undefined;
    creator?: UserStub | undefined;
    profileName?: string | undefined;
    guildName?: string | undefined;
    realm?: StoredRealm | undefined;
    region?: string | undefined;
    currentPermissionLevel?: number | undefined;
    accessRequestCount?: number | undefined;
    isPublic?: boolean | undefined;
    players?: StoredPlayer[] | undefined;
    mains?: PlayerMain[] | undefined;
    playerPool?: StoredPlayer[] | undefined;
    friendGuilds?: FriendGuild[] | undefined;

    constructor(data?: IFullGuildProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.creator = data["creator"] ? UserStub.fromJS(data["creator"]) : <any>undefined;
            this.profileName = data["profileName"];
            this.guildName = data["guildName"];
            this.realm = data["realm"] ? StoredRealm.fromJS(data["realm"]) : <any>undefined;
            this.region = data["region"];
            this.currentPermissionLevel = data["currentPermissionLevel"];
            this.accessRequestCount = data["accessRequestCount"];
            this.isPublic = data["isPublic"];
            if (data["players"] && data["players"].constructor === Array) {
                this.players = [] as any;
                for (let item of data["players"])
                    this.players!.push(StoredPlayer.fromJS(item));
            }
            if (data["mains"] && data["mains"].constructor === Array) {
                this.mains = [] as any;
                for (let item of data["mains"])
                    this.mains!.push(PlayerMain.fromJS(item));
            }
            if (data["playerPool"] && data["playerPool"].constructor === Array) {
                this.playerPool = [] as any;
                for (let item of data["playerPool"])
                    this.playerPool!.push(StoredPlayer.fromJS(item));
            }
            if (data["friendGuilds"] && data["friendGuilds"].constructor === Array) {
                this.friendGuilds = [] as any;
                for (let item of data["friendGuilds"])
                    this.friendGuilds!.push(FriendGuild.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullGuildProfile {
        data = typeof data === 'object' ? data : {};
        let result = new FullGuildProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["profileName"] = this.profileName;
        data["guildName"] = this.guildName;
        data["realm"] = this.realm ? this.realm.toJSON() : <any>undefined;
        data["region"] = this.region;
        data["currentPermissionLevel"] = this.currentPermissionLevel;
        data["accessRequestCount"] = this.accessRequestCount;
        data["isPublic"] = this.isPublic;
        if (this.players && this.players.constructor === Array) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        if (this.mains && this.mains.constructor === Array) {
            data["mains"] = [];
            for (let item of this.mains)
                data["mains"].push(item.toJSON());
        }
        if (this.playerPool && this.playerPool.constructor === Array) {
            data["playerPool"] = [];
            for (let item of this.playerPool)
                data["playerPool"].push(item.toJSON());
        }
        if (this.friendGuilds && this.friendGuilds.constructor === Array) {
            data["friendGuilds"] = [];
            for (let item of this.friendGuilds)
                data["friendGuilds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullGuildProfile {
    id?: number | undefined;
    creator?: UserStub | undefined;
    profileName?: string | undefined;
    guildName?: string | undefined;
    realm?: StoredRealm | undefined;
    region?: string | undefined;
    currentPermissionLevel?: number | undefined;
    accessRequestCount?: number | undefined;
    isPublic?: boolean | undefined;
    players?: StoredPlayer[] | undefined;
    mains?: PlayerMain[] | undefined;
    playerPool?: StoredPlayer[] | undefined;
    friendGuilds?: FriendGuild[] | undefined;
}

export class FriendGuild implements IFriendGuild {
    id?: number | undefined;
    guild?: StoredGuild | undefined;

    constructor(data?: IFriendGuild) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.guild = data["guild"] ? StoredGuild.fromJS(data["guild"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FriendGuild {
        data = typeof data === 'object' ? data : {};
        let result = new FriendGuild();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["guild"] = this.guild ? this.guild.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFriendGuild {
    id?: number | undefined;
    guild?: StoredGuild | undefined;
}

export class PendingAccessRequest implements IPendingAccessRequest {
    id?: number | undefined;
    profileId?: number | undefined;
    user?: UserStub | undefined;
    createdOn?: Date | undefined;

    constructor(data?: IPendingAccessRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.profileId = data["profileId"];
            this.user = data["user"] ? UserStub.fromJS(data["user"]) : <any>undefined;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PendingAccessRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PendingAccessRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["profileId"] = this.profileId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPendingAccessRequest {
    id?: number | undefined;
    profileId?: number | undefined;
    user?: UserStub | undefined;
    createdOn?: Date | undefined;
}

export class FullProfilePermissions implements IFullProfilePermissions {
    permissions?: ProfilePermissionByUser[] | undefined;
    currentPermissions?: number | undefined;

    constructor(data?: IFullProfilePermissions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions!.push(ProfilePermissionByUser.fromJS(item));
            }
            this.currentPermissions = data["currentPermissions"];
        }
    }

    static fromJS(data: any): FullProfilePermissions {
        data = typeof data === 'object' ? data : {};
        let result = new FullProfilePermissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["currentPermissions"] = this.currentPermissions;
        return data; 
    }
}

export interface IFullProfilePermissions {
    permissions?: ProfilePermissionByUser[] | undefined;
    currentPermissions?: number | undefined;
}

export class ProfilePermissionByUser implements IProfilePermissionByUser {
    user?: UserStub | undefined;
    permissionLevel?: number | undefined;

    constructor(data?: IProfilePermissionByUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserStub.fromJS(data["user"]) : <any>undefined;
            this.permissionLevel = data["permissionLevel"];
        }
    }

    static fromJS(data: any): ProfilePermissionByUser {
        data = typeof data === 'object' ? data : {};
        let result = new ProfilePermissionByUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["permissionLevel"] = this.permissionLevel;
        return data; 
    }
}

export interface IProfilePermissionByUser {
    user?: UserStub | undefined;
    permissionLevel?: number | undefined;
}

export class UpdatePermissionSet implements IUpdatePermissionSet {
    profileId?: number | undefined;
    updates?: UpdatePermission[] | undefined;

    constructor(data?: IUpdatePermissionSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            if (data["updates"] && data["updates"].constructor === Array) {
                this.updates = [] as any;
                for (let item of data["updates"])
                    this.updates!.push(UpdatePermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdatePermissionSet {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermissionSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        if (this.updates && this.updates.constructor === Array) {
            data["updates"] = [];
            for (let item of this.updates)
                data["updates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdatePermissionSet {
    profileId?: number | undefined;
    updates?: UpdatePermission[] | undefined;
}

export class UpdatePermission implements IUpdatePermission {
    delete?: boolean | undefined;
    userId?: string | undefined;
    newPermissionLevel?: number | undefined;

    constructor(data?: IUpdatePermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.delete = data["delete"];
            this.userId = data["userId"];
            this.newPermissionLevel = data["newPermissionLevel"];
        }
    }

    static fromJS(data: any): UpdatePermission {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["delete"] = this.delete;
        data["userId"] = this.userId;
        data["newPermissionLevel"] = this.newPermissionLevel;
        return data; 
    }
}

export interface IUpdatePermission {
    delete?: boolean | undefined;
    userId?: string | undefined;
    newPermissionLevel?: number | undefined;
}

export class AddFriendGuild implements IAddFriendGuild {
    profileId?: number | undefined;
    regionName?: string | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;

    constructor(data?: IAddFriendGuild) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            this.regionName = data["regionName"];
            this.realmName = data["realmName"];
            this.guildName = data["guildName"];
        }
    }

    static fromJS(data: any): AddFriendGuild {
        data = typeof data === 'object' ? data : {};
        let result = new AddFriendGuild();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        data["regionName"] = this.regionName;
        data["realmName"] = this.realmName;
        data["guildName"] = this.guildName;
        return data; 
    }
}

export interface IAddFriendGuild {
    profileId?: number | undefined;
    regionName?: string | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;
}

export class DeleteFriendGuild implements IDeleteFriendGuild {
    profileId?: number | undefined;
    friendGuildId?: number | undefined;

    constructor(data?: IDeleteFriendGuild) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            this.friendGuildId = data["friendGuildId"];
        }
    }

    static fromJS(data: any): DeleteFriendGuild {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFriendGuild();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        data["friendGuildId"] = this.friendGuildId;
        return data; 
    }
}

export interface IDeleteFriendGuild {
    profileId?: number | undefined;
    friendGuildId?: number | undefined;
}

export class EditNotes implements IEditNotes {
    profileId?: number | undefined;
    playerMainId?: number | undefined;
    newNotes?: string | undefined;

    constructor(data?: IEditNotes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profileId = data["profileId"];
            this.playerMainId = data["playerMainId"];
            this.newNotes = data["newNotes"];
        }
    }

    static fromJS(data: any): EditNotes {
        data = typeof data === 'object' ? data : {};
        let result = new EditNotes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileId"] = this.profileId;
        data["playerMainId"] = this.playerMainId;
        data["newNotes"] = this.newNotes;
        return data; 
    }
}

export interface IEditNotes {
    profileId?: number | undefined;
    playerMainId?: number | undefined;
    newNotes?: string | undefined;
}

export class Realm implements IRealm {
    name?: string | undefined;
    id?: number | undefined;
    slug?: string | undefined;

    constructor(data?: IRealm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.slug = data["slug"];
        }
    }

    static fromJS(data: any): Realm {
        data = typeof data === 'object' ? data : {};
        let result = new Realm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface IRealm {
    name?: string | undefined;
    id?: number | undefined;
    slug?: string | undefined;
}