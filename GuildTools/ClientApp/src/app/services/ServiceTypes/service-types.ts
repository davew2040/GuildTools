/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.3.0 (NJsonSchema v9.13.35.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class RegistrationCredentials implements IRegistrationCredentials {
    username!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegistrationCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegistrationCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface IRegistrationCredentials {
    username: string;
    email: string;
    password: string;
}

export class ResetPasswordWithTokenModel implements IResetPasswordWithTokenModel {
    userId?: string | undefined;
    token?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IResetPasswordWithTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.token = data["token"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordWithTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordWithTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["token"] = this.token;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IResetPasswordWithTokenModel {
    userId?: string | undefined;
    token?: string | undefined;
    newPassword?: string | undefined;
}

export class LoginCredentials implements ILoginCredentials {
    email!: string;
    password!: string;

    constructor(data?: ILoginCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LoginCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginCredentials {
    email: string;
    password: string;
}

export class GuildMember implements IGuildMember {
    name?: string | undefined;
    realm?: string | undefined;
    level?: number | undefined;
    equippedIlvl?: number | undefined;
    class?: number | undefined;
    maximumIlvl?: number | undefined;
    achievementPoints?: number | undefined;
    mountCount?: number | undefined;
    petCount?: number | undefined;
    pvp2v2Rating?: number | undefined;
    pvp3v3Rating?: number | undefined;
    pvpRbgRating?: number | undefined;
    totalHonorableKills?: number | undefined;
    guildRank?: number | undefined;
    azeriteLevel?: number | undefined;
    raiderIoMplusScore?: number | undefined;

    constructor(data?: IGuildMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.realm = data["realm"];
            this.level = data["level"];
            this.equippedIlvl = data["equippedIlvl"];
            this.class = data["class"];
            this.maximumIlvl = data["maximumIlvl"];
            this.achievementPoints = data["achievementPoints"];
            this.mountCount = data["mountCount"];
            this.petCount = data["petCount"];
            this.pvp2v2Rating = data["pvp2v2Rating"];
            this.pvp3v3Rating = data["pvp3v3Rating"];
            this.pvpRbgRating = data["pvpRbgRating"];
            this.totalHonorableKills = data["totalHonorableKills"];
            this.guildRank = data["guildRank"];
            this.azeriteLevel = data["azeriteLevel"];
            this.raiderIoMplusScore = data["raiderIoMplusScore"];
        }
    }

    static fromJS(data: any): GuildMember {
        data = typeof data === 'object' ? data : {};
        let result = new GuildMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["realm"] = this.realm;
        data["level"] = this.level;
        data["equippedIlvl"] = this.equippedIlvl;
        data["class"] = this.class;
        data["maximumIlvl"] = this.maximumIlvl;
        data["achievementPoints"] = this.achievementPoints;
        data["mountCount"] = this.mountCount;
        data["petCount"] = this.petCount;
        data["pvp2v2Rating"] = this.pvp2v2Rating;
        data["pvp3v3Rating"] = this.pvp3v3Rating;
        data["pvpRbgRating"] = this.pvpRbgRating;
        data["totalHonorableKills"] = this.totalHonorableKills;
        data["guildRank"] = this.guildRank;
        data["azeriteLevel"] = this.azeriteLevel;
        data["raiderIoMplusScore"] = this.raiderIoMplusScore;
        return data; 
    }
}

export interface IGuildMember {
    name?: string | undefined;
    realm?: string | undefined;
    level?: number | undefined;
    equippedIlvl?: number | undefined;
    class?: number | undefined;
    maximumIlvl?: number | undefined;
    achievementPoints?: number | undefined;
    mountCount?: number | undefined;
    petCount?: number | undefined;
    pvp2v2Rating?: number | undefined;
    pvp3v3Rating?: number | undefined;
    pvpRbgRating?: number | undefined;
    totalHonorableKills?: number | undefined;
    guildRank?: number | undefined;
    azeriteLevel?: number | undefined;
    raiderIoMplusScore?: number | undefined;
}

export class GuildFound implements IGuildFound {
    found?: boolean | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;

    constructor(data?: IGuildFound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.found = data["found"];
            this.realmName = data["realmName"];
            this.guildName = data["guildName"];
        }
    }

    static fromJS(data: any): GuildFound {
        data = typeof data === 'object' ? data : {};
        let result = new GuildFound();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["found"] = this.found;
        data["realmName"] = this.realmName;
        data["guildName"] = this.guildName;
        return data; 
    }
}

export interface IGuildFound {
    found?: boolean | undefined;
    realmName?: string | undefined;
    guildName?: string | undefined;
}

export class GuildProfile implements IGuildProfile {
    id?: number | undefined;
    creator?: CreatorStub | undefined;
    profileName?: string | undefined;
    guildName?: string | undefined;
    realm?: string | undefined;
    region?: string | undefined;

    constructor(data?: IGuildProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.creator = data["creator"] ? CreatorStub.fromJS(data["creator"]) : <any>undefined;
            this.profileName = data["profileName"];
            this.guildName = data["guildName"];
            this.realm = data["realm"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): GuildProfile {
        data = typeof data === 'object' ? data : {};
        let result = new GuildProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["profileName"] = this.profileName;
        data["guildName"] = this.guildName;
        data["realm"] = this.realm;
        data["region"] = this.region;
        return data; 
    }
}

export interface IGuildProfile {
    id?: number | undefined;
    creator?: CreatorStub | undefined;
    profileName?: string | undefined;
    guildName?: string | undefined;
    realm?: string | undefined;
    region?: string | undefined;
}

export class CreatorStub implements ICreatorStub {
    id?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;

    constructor(data?: ICreatorStub) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.username = data["username"];
        }
    }

    static fromJS(data: any): CreatorStub {
        data = typeof data === 'object' ? data : {};
        let result = new CreatorStub();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["username"] = this.username;
        return data; 
    }
}

export interface ICreatorStub {
    id?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
}

export class Realm implements IRealm {
    name?: string | undefined;
    id?: number | undefined;
    slug?: string | undefined;

    constructor(data?: IRealm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.slug = data["slug"];
        }
    }

    static fromJS(data: any): Realm {
        data = typeof data === 'object' ? data : {};
        let result = new Realm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface IRealm {
    name?: string | undefined;
    id?: number | undefined;
    slug?: string | undefined;
}